service: customers-api

plugins:
  - serverless-esbuild
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage}
  logRetentionInDays: 180
  versionFunctions: false
  timeout: 30
  environment:
    STAGE: ${self:provider.stage}

custom:
  prefix: ${self:service}-${self:provider.stage}
  tableName: ${self:custom.prefix}-customers-table
  lambdaUrl: https://r7abtoek3c.execute-api.us-east-1.amazonaws.com
  queueUrl: https://sqs.us-east-1.amazonaws.com/475637810843/customers-api-prod-bulk-create-queue

functions:
  GetAll:
    handler: ./src/functions/get-all/handler.handler
    role: FunctionRole
    name: ${self:custom.prefix}-get-all-fn
    environment:
      TABLE_NAME: ${self:custom.tableName}
    events:
      - httpApi:
          path: /api/get-all
          method: GET

  BulkCreateProxy:
    handler: ./src/functions/bulk-create-proxy/handler.handler
    role: FunctionRole
    name: ${self:custom.prefix}-bulk-create-proxy-fn
    events:
      - httpApi:
            path: /api/bulk-create
            method: POST
    environment:
      QUEUE_URL: ${self:custom.queueUrl}

  BulkCreate:
    handler: ./src/functions/bulk-create/handler.handler
    role: FunctionRole
    name: ${self:custom.prefix}-bulk-create
    reservedConcurrency: 1
    environment:
      TABLE_NAME: ${self:custom.tableName}
    events:
      - sqs: 
          batchSize: 1
          arn:
            Fn::GetAtt: [BulkCreateQueue, Arn]
  Simulator:
    handler: ./src/functions/simulator/handler.handler
    role: FunctionRole
    name: ${self:custom.prefix}-simulator-fn
    events:
      - httpApi:
          path: /api/simulator
          method: POST
    environment:
      LAMBDA_URL: ${self:custom.lambdaUrl}

  Clear:
    handler: ./src/functions/clear/handler.handler
    role: FunctionRole
    name: ${self:custom.prefix}-clear-fn
    environment:
      TABLE_NAME: ${self:custom.tableName}
      LAMBDA_URL: ${self:custom.lambdaUrl}
    events:
      - httpApi:
          path: /api/clear
          method: DELETE

resources:
  Resources:
    FunctionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: ${self:custom.prefix}-FunctionRole-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: 
                    - "sqs:*"
                  Resource: "*"
                - Effect: Allow
                  Action: 
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Query"
                  Resource: 
                    - !GetAtt CustomersTable.Arn
                - Effect: Allow
                  Action: 
                    - "sqs:SendMessage"
                    - "sqs:ReceiveMessage"
                    - "sqs:DeleteMessage"
                  Resource: 
                    - !GetAtt BulkCreateQueue.Arn
    CustomersTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: 
          Fn::Sub: ${self:custom.prefix}-customers-table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    BulkCreateQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName:  
          Fn::Sub: ${self:custom.prefix}-bulk-create-queue